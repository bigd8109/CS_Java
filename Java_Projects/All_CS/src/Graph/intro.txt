Basic operations:

adjacent(G, x, y): tests whether there is an edge from node x to node y.
neighbors(G, x): lists all nodes y such that there is an edge from x to y.
add(G, x, y): adds to G the edge from x to y, if it is not there.
delete(G, x, y): removes the edge from x to y, if it is there.
get_node_value(G, x): returns the value associated with the node x.
set_node_value(G, x, a): sets the value associated with the node x to a.
get_edge_value(G, x, y): returns the value associated to the edge (x,y).
set_edge_value(G, x, y, v): sets the value associated to the edge (x,y) to v.

One way is to use an "adjacency list": We have a list of nodes and every node stores a list of adjacent nodes.

public class Node {
  public int value;
  public ArrayList<Edges> edges;
}

public class Edge {
  public Node destination;
  public int weight;
}

public class Graph {
  public ArrayList<Node> nodes;
}

Graphs: Performance
Say we have V nodes and E edges.

What is the performance for these operations?

Add vertex
Add edge
Remove vertex
Remove edge
Depends on implementation, but this is something you look up.

Graphs: Depth First Search (DFS)
bool search(Node root, Node dest) {
  if (root.value == dest.value)
    return true;
  root.visited = true;
  for (Node n : root.adjacent) {
    if (!n.visited) {
      if (search(n, dest))
        return true;
    }
  }
  return false;
}

Graphs: Breadth First Search (BFS)
bool search(Node root, Node dest) {
  Queue q = new Queue();
  if (root.value == dest.value)
    return true;
  root.visited = true;
  q.enqueue(root);
  while (!q.isEmpty()) {
    Node r = q.dequeue();
    for (Node n in r.adjacent) {
      if (!n.visited) {
        if (search(n, dest))
          return true;
        queue.enqueue(n);
      }
    }
  }
  return false;
}

Interesting Graph Problems (wiki):

Djikstra's
Floyd-Warshall
Ford-Fulkerson
Kruskal's

